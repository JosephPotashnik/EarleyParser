using System.Collections.Generic;
using System.Linq;

namespace EarleyParser
{
    /// <summary>
    /// This class inherits from the Earley Parser.
    /// instead of being run as a parser, it runs as a generator, i.e, it generates the entire parse forest of the grammar, 
    /// i.e, the generator chart contains every tree generated by the grammar (up to a given sentence length). 
    /// </summary>
    public class EarleyGenerator : EarleyParser
    {
        public EarleyGenerator(Grammar g, Vocabulary v, int maxWords) : base(g, v, System.Array.Empty<string>(), maxWords)
        { }

        protected override EarleyColumn[] PrepareEarleyTable(string[] text, int maxWords)
        {
            var table = new EarleyColumn[maxWords + 1];
            for (var i = 1; i < table.Length; i++)
            {
                table[i] = new EarleyColumn(i, "generator");
            }

            table[0] = new EarleyColumn(0, "");
            return table;
        }

        protected override HashSet<string> GetPossibleSyntacticCategoriesForToken(string nextScannableTerm)
        {
            return Voc.POSWithPossibleWords.Keys.ToHashSet();
        }

        protected override void AddLexicalizedRules(List<Rule> lexicalRules, int i, bool preprocess = true)
        { return; }

        public string[][] GetAllSequences(bool onlyPartsOfSpeechSequences = true)
        {
            var allNonTerminalsSequences = new string[_table.Length][];
            for (int i = 0; i < _table.Length; i++)
            {
                allNonTerminalsSequences[_table.Length - 1 - i] = GetFormattedString(i, onlyPartsOfSpeechSequences);
            }

            return allNonTerminalsSequences;
        }

    }
}